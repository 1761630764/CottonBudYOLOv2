# Ultralytics 🚀 AGPL-3.0 许可协议 - https://ultralytics.com/license

# 用于 YOLO 训练、验证、预测和导出的全局配置 YAML 文件，包含设置和超参数
# 文档详见 https://docs.ultralytics.com/usage/cfg/

task: detect # YOLO任务，如detect检测、segment分割、classify分类、pose姿态、obb定向框
mode: train # YOLO模式，如train训练、val验证、predict预测、export导出、track跟踪、benchmark基准测试

# 训练设置 -------------------------------------------------------------------------------------------------------
model: # 模型文件路径，如yolov8n.pt或yolov8n.yaml
data: # 数据文件路径，如coco8.yaml
epochs: 100 # 训练轮数
time: # 训练小时数，若提供则覆盖epochs
patience: 100 # 早停等待无改进轮数
batch: 16 # 每批图像数（-1为自动批次）
imgsz: 640 # 输入图像尺寸（训练/验证为整数，预测/导出可为[h,w]列表）
save: True # 是否保存训练检查点和预测结果
save_period: -1 # 每x轮保存一次检查机（<1禁用）
cache: False # 是否使用缓存（True/ram/disk/False）
device: # 设备：CUDA设备编号或"cpu/mps"或-1自动选空闲GPU
workers: 8 # 数据加载线程数（DDP下每RANK）
project: # 项目名称
name: # 实验名称，结果保存在project/name目录
exist_ok: False # 是否覆盖已存在实验
pretrained: False # 是否使用预训练模型（布尔）或权重路径（字符串）
optimizer: auto # 优化器选择（SGD/Adam/Adamax/AdamW/NAdam/RAdam/RMSProp/auto）
verbose: True # 是否打印详细输出
seed: 0 # 随机种子
deterministic: True # 是否启用确定性模式
single_cls: False # 是否将多类数据按单类训练
rect: False # 是否使用矩形训练/验证
cos_lr: False # 是否使用余弦学习率调度
close_mosaic: 10 # 最后若干轮关闭mosaic增强（0禁用）
resume: False # 是否从上次检查点恢复训练
amp: True # 是否使用自动混合精度训练
fraction: 1.0 # 用于训练的数据集比例
profile: False # 是否分析ONNX/TensorRT速度
freeze: # 冻结前n层或层索引列表
multi_scale: False # 是否启用多尺度训练
# 分割
overlap_mask: True # 是否合并目标掩膜为单张掩膜（仅分割训练）
mask_ratio: 4 # 掩膜下采样比例（仅分割训练）
# 分类
dropout: 0.0 # dropout正则化比例（仅分类训练）

# 验证/测试设置 ----------------------------------------------------------------------------------------------------
val: True # 训练期间是否验证
split: val # 验证所用数据集划分（val/test/train）
save_json: False # 是否保存结果为JSON
conf: # 检测置信度阈值（预测默认0.25，验证默认0.001）
iou: 0.7 # NMS的IoU阈值
max_det: 300 # 每张图最大检测数
half: False # 是否使用半精度FP16
dnn: False # 是否使用OpenCV DNN进行ONNX推理
plots: True # 是否保存训练/验证的图表与图像

# 预测设置 -----------------------------------------------------------------------------------------------------
source: # 图像或视频源目录
vid_stride: 1 # 视频帧采样步长
stream_buffer: False # 是否缓存所有流帧（True）或仅返回最新帧（False）
visualize: False # 是否可视化模型特征（预测）或TP/FP/FN（验证）
augment: False # 是否对预测源进行图像增强
agnostic_nms: False # 是否使用与类别无关的NMS
classes: # 按类别过滤结果，如classes=0或classes=[0,2,3]
retina_masks: False # 是否使用高分辨率分割掩膜
embed: # 返回指定层的特征向量/嵌入

# 可视化设置 ---------------------------------------------------------------------------------------------------
show: False # 是否显示预测图像和视频（环境允许时）
save_frames: False # 是否保存逐帧预测结果
save_txt: False # 是否保存结果为txt文件
save_conf: False # 是否保存置信度分数
save_crop: False # 是否保存裁剪后的预测图
show_labels: True # 是否显示预测标签
show_conf: True # 是否显示预测置信度
show_boxes: True # 是否显示预测框
line_width: # 边界框线宽（None则自动缩放）

# 导出设置 ------------------------------------------------------------------------------------------------------
format: torchscript # 导出格式（见文档）
keras: False # 是否使用Keras
optimize: False # TorchScript是否针对移动端优化
int8: False # 是否进行CoreML/TF INT8量化
dynamic: False # ONNX/TF/TensorRT是否启用动态维度
simplify: True # ONNX是否使用onnxslim简化模型
opset: # ONNX的opset版本
workspace: # TensorRT工作空间大小（GiB），None则自动分配
nms: False # CoreML是否添加NMS

# 超参数 ------------------------------------------------------------------------------------------------------
lr0: 0.01 # 初始学习率（SGD=1E-2，Adam=1E-3）
lrf: 0.01 # 最终学习率（lr0*lrf）
momentum: 0.937 # SGD动量/Adam beta1
weight_decay: 0.0005 # 优化器权重衰减5e-4
warmup_epochs: 3.0 # 预热轮数（可为小数）
warmup_momentum: 0.8 # 预热初始动量
warmup_bias_lr: 0.1 # 预热初始偏置学习率
box: 7.5 # 框损失增益
cls: 0.5 # 分类损失增益（与像素数缩放）
dfl: 1.5 # DFL损失增益
pose: 12.0 # 姿态损失增益
kobj: 1.0 # 关键点目标损失增益
nbs: 64 # 名义批次大小
hsv_h: 0.015 # HSV色调增强比例
hsv_s: 0.7 # HSV饱和度增强比例
hsv_v: 0.4 # HSV明度增强比例
degrees: 0.0 # 图像旋转（±度）
translate: 0.1 # 图像平移（±比例）
scale: 0.5 # 图像缩放（±增益）
shear: 0.0 # 图像剪切（±度）
perspective: 0.0 # 图像透视（±比例，0-0.001）
flipud: 0.0 # 上下翻转概率
fliplr: 0.5 # 左右翻转概率
bgr: 0.0 # BGR通道切换概率
mosaic: 1.0 # mosaic增强概率
mixup: 0.0 # mixup增强概率
cutmix: 0.0 # cutmix增强概率
copy_paste: 0.0 # 分割copy-paste增强概率
copy_paste_mode: "flip" # copy-paste方式（flip/mixup）
auto_augment: randaugment # 分类自动增强策略（randaugment/autoaugment/augmix）
erasing: 0.4 # 分类训练中随机擦除概率（0-0.9，0为关闭）

# 自定义config.yaml ---------------------------------------------------------------------------------------------
cfg: # 用于覆盖defaults.yaml的自定义配置文件路径

# 跟踪器设置 ------------------------------------------------------------------------------------------------------
tracker: botsort.yaml # 跟踪器类型（botsort.yaml/bytetrack.yaml）